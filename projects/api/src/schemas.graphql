type Ingredient {
  ingredient: String
  amount: String
}

input IngredientInput {
  ingredient: String
  amount: String
}

type Recipe {
  id: ID
  title: String
  description: String
  style: [String]
  projectedABV: Float
  yields: String
  ingredients: [Ingredient]
  directions: [String]
}

input RecipeInput {
  title: String!
  description: String
  style: [String]
  projectedABV: Float
  yields: String
  ingredients: [IngredientInput]
  directions: [String]
}

type Gravity {
  date: String
  gravity: Float
}

input GravityInput {
  date: String
  gravity: Float
}

type Temperature {
  date: String
  temperature: String
}

input TemperatureInput {
  date: String
  temperature: String
}

type Brew {
  id: ID
  gravityReadings: [Gravity]
  temperatureReadings: [Temperature]
  bottleDate: String
  consumeDate: String
  notes: String
  rating: Float
}

input BrewInput {
  gravityReadings: [GravityInput]
  temperatureReadings: [TemperatureInput]
  bottleDate: String
  consumeDate: String
  notes: String
  rating: Float
}

type Query {
  recipes: [Recipe]
  recipe(id: ID!): Recipe
  brews: [Brew]
  brew(id: ID!): Brew
}

type Mutation {
  addRecipe(recipe: RecipeInput!): Recipe
  addBrew(fromRecipe: ID!, brewDetails: BrewInput!): Brew
  # tweakRecipe(forBrew: ID!, recipe: RecipeInput): Recipe
}
